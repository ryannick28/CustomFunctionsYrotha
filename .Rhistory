5/2
5/2
5/2
1+1
1+1
1+1
1+1
3*30
100/20
1+1
3*30
100/20
source("~/Desktop/testSkript.R")
100/2
100/20
1+1
"*80"
2*80
10+10
10+10
3*100
10+10
3*100
10+10
3*100
3*100
10+10
3*100
vecA <- c(2, 6, 7, 9)
vecB <- c("gut", "schlecht", "mittel", "gut")
vecC <- c(0.4, 0.2, 0.42, 0.9)
vecA
vecB
vecC
dat <- data.frame(vecA, vecB, vecC)
dat
class(dat)
2,4,2
c(3,4,5)
dat$vecB
dat$vecB
dat$vecB[3]
dat[c(1,2,3), ]
dat
dat[c(1,3), ]
dat[c(1,3), c(1,2)]
# Aufgabe 1:
Groesse <- c(182, 174, 178, 181, 163, 160)
Groesse
Groesse.m <- Groesse / XXX
Groesse.m <- Groesse / 100
Groesse.m
Groesse.m[c(1,3)]
Groesse.m[Groesse.m > XXX ]
Groesse.m[Groesse.m > 1.75]
# Aufgabe 1:
Groesse <- c(182, 174, 178, 181, 163, 160)
Groesse
Groesse.m <- Groesse / 100
Groesse.m
Groesse.m[c(1,3)]
Groesse.m[Groesse.m > 1.75 ]
Pnr <- c(1,2,3,4,5,6)
dat.groes <- data.frame(Pnr, Groesse.m)
dat.groes
1:6
1/6
1:6
1:100
4:10
dat.groes
# Aufgabe 2:
iris
?iris
iris[XXX,]
iris[c(1,2,3,4,5,6),]
iris[c(1,2,3,4,5,6),]
iris$Sepal.Length
iris$Sepal.Length < 5
iris
dim(iris)
iris$Sepal.Length
iris$Sepal.Length < 5
iris[iris$Sepal.Length < 5, ]
iris[iris$Species == 'versicolor', ]
iris$Species == 'versicolor'
iris
iris$Species == 'versicolor'
# Aufgabe 3:
plot(iris$Sepal.Length, iris$Sepal.Width)
# Aufgabe 1:
Groesse <- c(182, 174, 178, 181, 163, 160)
Groesse
Groesse.m <- Groesse / 100
Groesse.m
Groesse.m[c(1,3)]
Groesse.m[Groesse.m > 1.75 ]
Pnr <- c(1,2,3,4,5,6)
dat.groes <- data.frame(Pnr, Groesse.m)
dat.groes
# Aufgabe 2:
iris
iris[c(1,2,3,4,5,6),]
iris[iris$Sepal.Length < 5, ]
iris[iris$Species == 'versicolor', ]
# Aufgabe 3:
plot(iris$Sepal.Length, iris$Sepal.Width)
library(CustomFunctionsYrotha)
a <- iris
a
setUpGraph()
niceNaPlot(a)
head(a)
a$Species <- as.character(a$Species)
str(a)
a[2,5] <- NA
a
head(a)
a[4,1] <- NA
head(a)
niceNaPlot(a)
20 + 20
20 + 20
2*10
20/10
1- 0
1 - 0.2
2^3
4^0.5
sqrt(4)
a <-  20
a ^b
a ^bb
bb <- 2
a ^bb
bblakdjlksajd <- 2
bblakdjlksajd + 1
rm(bblakdjlksajd)
a^bb
vec1 <- c(20, 122, 39)
vec1
vec1 <- c(20,122,39)
vec1
vec1 <- c(20,    122,      39)
vec1
vec1 <- c(20    ,    122,      39)
vec1
vec1 <- c (20, 122, 39)
vec1
vec1 <- c(20, 122, 39)
vec1
vec2 <- c(2, 4, 3)
vec1 + 3
vec1 * 3
vec1 + vec2
vec1 <- c(20, 122, 39)
vec2 <- c(2, 4, 3, 5)
vec1 + vec2
a <- "ja"
a
vec3 <- c("Kategorie1", "Blau", "Gemischt")
vec3
vec1
vecA <- c(2, 6, 7, 9)
vecB <- c("gut", "schlecht", "mittel", "gut")
vecC <- c(0.4, 0.2, 0.42, 0.9)
vecA
vecB
vecC
dat <- data.frame(vecA, vecB, vecC)
dat
vecA
vecA[2]
vecA[3]
vecA[1]
c(2,4)
vecA[c(2,4)]
vecA[c(2,1)]
vecA[c(2,4)]
s <- c(2, 4)
s
vecA[s]
s
s
dat
dat$vecC
dat
dat[2,3]
dat[2,]
dat[,2]
dat$vecB
dat[,2]
dat$vecB
dat[c(1,3),]
logVar <- TRUE
logVar
logVar <- FALSE
logVar
3 > 5
3 < 5
alter <- c(22, 34, 19, 18)
alter
alter[c(FALSE, FALSE, TRUE, TRUE)]
alter[c(3,4)]
alter < 20
which(alter < 20)
alter[which(alter < 20)]
alter
alter
alter[which(alter < 20)]
alter < 20
which(alter < 20)
alter
# Aufgabe 1:
Groesse <- c(182, 174, 178, 181, 163, 160)
Groesse
Groesse.m <- Groesse / 100
Groesse.m
Groesse.m[c(1,3)]
Groesse.m > 1.75
Groesse.m[Groesse.m > 1.75 ]
which(Groesse.m > 1.75)
Groesse.m[which(Groesse.m > 1.75) ]
Pnr <- c(1,2,3,4,5,6)
1:6
10:1000
Pnr <- c(1:6)
Pnr
Pnr <- 1:6
Pnr
dat.groes <- data.frame(Pnr, Groesse.m)
dat.groes
# Aufgabe 2:
iris
?iris
iris[1:6,]
iris[1:6,]
iris[iris$Sepal.Length < 5, ]
iris
iris$Sepal.Length
iris$Sepal.Length < 5
iris[iris$Sepal.Length < 5, ]
iris
iris$Species
iris$Species == 'versicolor'
iris[iris$Species == 'versicolor', ]
iris$Sepal.Length
iris$Sepal.Width
# Aufgabe 3:
plot(iris$Sepal.Length, iris$Sepal.Width)
# Aufgabe 3:
plot(x=iris$Sepal.Length, y=iris$Sepal.Width)
dat
dat[,]
dat[1,]
dat[c(1,3),]
dat[c(TRUE, FALSE, TRUE, FALSE), ]
dat$vecA
dat$vecA==7
dat$vecA == 7
dat$vecA == 7
dat[dat$vecA == 7, ]
dat$vecA == 7
3*3
3*3
3*3
20/2
a <- 4
b <- 24
a * b
vec1 <- c(20, 122, 39)
vec1
vec1
vec1 <- c(20,122,39)
vec1
vec1 <- c(20     ,      122 ,                     39)
vec1
vec1 <- c(20, 122, 39)
vec1
vec1 / 2
vec2 <- c(2, 3, 1)
vec1
vec2
vec1 + vec2
aa <- "ja"
aa
vec2 <- c("Kategorie1", "Blau", "Gemischt")
vec2
vec2 + 1
aa
vecA <- c(2, 6, 7, 9)
vecA
vecB <- c("gut", "schlecht", "mittel", "gut")
vecC <- c(0.4, 0.2, 0.42, 0.9)
dat <- data.frame(vecA, vecB, vecC)
dat
vecA <- c(2, 6, 7, 9)
vecA <- c(2, 6, 7, 9)
vecA
vecA[2]
vecA[3]
vecA
c(2,4)
vecA[c(2,4)]
c(2,4)
vecA[c(2,4)]
s <- c(2, 4)
s
vecA[s]
dat
dat$vecB
dat
dat[2  ,  3 ]
dat[2,  3]
dat[3,  3]
dat[3,  2]
dat[3,]
dat[,2]
dat$vecB
dat
dat[c(2,4) , c(1,2)]
logV <- TRUE
logV
logV <- FALSE
logV
3 > 5
3 < 5
4 == 4
5 == 2
alter <- c(22, 34, 19, 18)
alter
alter[c(2,4)]
alter
alter[c(FALSE, FALSE, TRUE, TRUE)]
alter[c(FALSE, TRUE, TRUE, TRUE)]
alter[c(FALSE, FALSE, TRUE, TRUE)]
alter + 1
alter < 20
alter
alter < 20
c(FALSE, FALSE, TRUE, TRUE)
alter[c(FALSE, FALSE, TRUE, TRUE)]
alter[alter < 20]
alter < 20
alter[alter < 20]
alter[alter > 20]
alter < 20
alter < 20
alter < 20
which( alter < 20 )
which(alter < 20)
alter[  which(alter < 20)   ]
alter[alter < 20]
alter[  which(alter < 20)   ]
which(alter < 20)
alter < 20
lakdjflksadjflksaljf <-  3
cor.test(iris$Sepal.Length, iris$Sepal.Width)
library(psych)
corr.test(iris$Sepal.Length, iris$Sepal.Width)
#*********************************************************************************
#   SECTION_1   ####
#*********************************************************************************
### Gewicht vs Körpergrösse:
set.seed(121)
w <- rnorm(n = 200, mean = 63, sd = 10)
w <- w[w>45]
set.seed(111)
h <- w/100 + 1.1 + rnorm(n=length(w), mean = 0, sd = 0.05)
h[h==max(h)] <- 1.9
h[h==max(h)] <- 1.85
### Libraries:
library(CustomFunctionsYrotha)
#*********************************************************************************
#   SECTION_1   ####
#*********************************************************************************
### Gewicht vs Körpergrösse:
set.seed(121)
w <- rnorm(n = 200, mean = 63, sd = 10)
w <- w[w>45]
set.seed(111)
setUpGraph()
source("~/Desktop/PostDoc_Unterlagen/Arbeit/VorlesungsUnterlagen/RechnergestDatenAnal_HS21/Materialien/2021_Yannick/Folien/Einheit07/generieren_von_plots_etc.R")
source("~/Desktop/PostDoc_Unterlagen/Arbeit/VorlesungsUnterlagen/RechnergestDatenAnal_HS21/Materialien/2021_Yannick/Folien/Einheit07/generieren_von_plots_etc.R")
source("~/Desktop/PostDoc_Unterlagen/Arbeit/VorlesungsUnterlagen/RechnergestDatenAnal_HS21/Materialien/2021_Yannick/Folien/Einheit07/generieren_von_plots_etc.R")
20 * 40
6/2
a <- 33
b <- 40
a + b
vec1 <- c(20, 122, 39)
vec1
vec1 <- c(20,122,39)
vec1
vec1 <- c(20    ,    122,    39)
vec1
vec1 <- c(20    ,    122,    39   )
vec1
vec1 <- c(20, 122, 39)
vec1
vec1 * 3
vec2 <- c(1, 3, 5)
vec1 + vec2
aa <- "Ja"
aa
vec2 <- c("Kategorie1", "Blau", "Gemischt")
vec2
vec2 + 1
vecA <- c(2, 6, 7, 9)
vecB <- c("gut", "schlecht", "mittel", "gut")
vecC <- c(0.4, 0.2, 0.42, 0.9)
dat <- data.frame(vecA, vecB, vecC)
dat
vecA <- c(2, 6, 7, 9)
vecA
vecA[2]
vecA[4]
vecA[c(2,4)]
s <- c(2,4)
s
vecA[c(2,4)]
vecA[s]
dat
dat$vecB
dat <- iris
ls()
View(dat)
dat
dat
dat
paste(c(1,2))
paste(c(1,2), collapse = '')
as.numeric(paste(c(1,2), collapse = ''))
dat <- iris[,1:2]
dat
apply(dat, 1, FUN = function(x)as.numeric(paste(x, collapse = '')))
dat[1,]
as.numeric(paste(dat[1,], collapse = ''))
dat[1,
]
mean(dat[1,])
as.matrix(dat)
apply(as.matrix(dat), 1, FUN = function(x) as.numeric(paste(x, collapse = '')))
dd <- as.matrix(dat)
dd[1,]
as.numeric(paste(dd[1,], collapse = ''))
as.numeric(paste(as.vector(dd[1,]), collapse = ''))
as.vector(dd[1,])
paste(as.vector(dd[1,]), collapse = '')
apply(dat, 1, FUN = function(x) paste(x, collapse = ''))
iris
summary(iris)
View(iris)
read.csv("testFile.csv")
getwd()
library(ggplot2)
install.packages("GGally")
library(CustomFunctionsYrotha)
library(GGally)
setUpGraph()
ggpairs(iris)
nicePairsPlot(iris)
ggpairs(iris)
nicePairsPlot(iris)
install.packages('car')
install.packages("car")
library(car)
scatterplot(iris$Sepal.Length, iris$Sepal.Width)
scatterplot(iris$Sepal.Length, iris$Sepal.Width)
library(car)
scatterplot(iris$Sepal.Length, iris$Sepal.Width)
load("/home/yrothacher/Desktop/PostDoc_Unterlagen/Arbeit/VorlesungsUnterlagen/RechnergestDatenAnal_HS21/Materialien/2021_Yannick/Folien/Einheit03/VorzeigeOrdner/FacExmpl.RData")
ls()
dat
head(da)
head(dat)
dat$Maturaland
factor(dat$Maturaland, levels = 1:4, labels=c("Schweiz", "Oesterreich",
"Deutschland", "anderswo"))
install.packages('devtools')
install.packages("revdepcheck")
version
setRepositories()
ap <- available.packages()
ap
"revdepcheck" %in% rownames(ap)
devtools::install_github(repo = "r-lib/revdepcheck")
beepr::beep(2)
devtools::install_github(repo = "r-lib/revdepcheck")
library(revdepcheck)
library(revdepcheck)
library(revdepcheck)
install.packages("miniCRAN")
install.packages("rhub")
install.packages("profvis")
install.packages('covr')
install.packages('microbenchmark')
install.packages('lattice')
library(devtools)
library(revdepcheck)
library(miniCRAN)
library(rhub)
library(profvis)
library(covr)
library(microbenchmark)
library(lattice)
mean <- 3
mean
mean(1:5)
getwd()
setwd("/home/yrothacher/pCloudDrive/windowsSharedFolder/phdUnterlagen/myR_packages/CustomFunctionsYrotha")
devtools::install_github(repo = "ryannick28/CustomFunctionsYrotha", ref = 'main')
